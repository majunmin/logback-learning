<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当scan被设置为true时，当配置文件发生改变，将会被重新加载，默认为true
    scanPeriod：检测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认为毫秒，
          当scan=true时这个值生效，默认时间间隔为1分钟
    debug：当被设置为true时，将打印出logback内部日志信息，实时查看logback运行信息，默认为false
-->
<configuration scan="false" scanPeriod="60000" debug="false">
    <!--控制台输出 ConsoleAppender-->
    <!--<appender>是<configuration>的子节点，是负责写日志的组件。
        <appender>有两个必要属性name和class
        1 name指定<appender>的名称
        2 class指定<appender>的全限定名

        appender 有好几种

        ConsoleAppender
        RollingFileAppender
            RollingFileAppender的作用是滚动记录文件，先将日志记录到指定文件，当符合某个条件时再将日志记录到其他文件

        appender 有以下几个子节点
        1 <file>表示写入的文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在则自动创建
        2 <append>如果为true表示日志被追加到文件结尾，如果是false表示清空文件
        3 <encoder>表示输出格式
        4 <prudent>如果为true表示日志会被安全地写入文件，
           即使其他的FileAppender也在向此文件做写入操作，效率低，默认为false
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--格式化输出 layout, 目前官方推荐使用 encoder, why?
       1 <encoder>是0.9.19版本之后引进的，以前的版本使用<layout>，
           logback极力推荐的是使用<encoder>而不是<layout>
       2 最常用的FileAppender和它的子类的期望是使用<encoder>而不再使用<layout>
       3 encoder主要做了两件事
           1):将日志信息转化为字节数组
           2):将字节数组 写入 输出流
       4 encoder 有一个 pattern 节点
           有一系列可选参数 == 使用“%+转换符”的方式，如果要输出”%”则必须使用”\%”对”%”进行转义
   -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="rolling-file-1" class="ch.qos.logback.core.rolling.RollingFileAppender">
       <!-- <rollingPolicy>的作用是当发生滚动时，定义RollingFileAppender的行为，
             TimeBasedRollingPolicy是最常用的滚动策略，它根据时间指定滚动策略，既负责滚动也负责触发滚动，有以下节点:

             1 <fileNamePattern>(必要): 包含文件名及"%d"转换符，
                "%d"可以包含一个Java.text.SimpleDateFormat指定的时间格式，如%d{yyyy-MM}，
                如果直接使用%d那么格式为yyyy-MM-dd。
                RollingFileAppender的file子节点可有可无，通过设置file可以为活动文件和归档文件指定不同的位置
             2 <maxHistory>(可选):  控制保留的归档文件的最大数量，如果超出数量就删除旧文件，
                假设设置每个月滚动且<maxHistory>是6，则只保存最近6个月的文件

             SizeBasedTriggeringPolicy，用于按照文件大小进行滚动
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>D:/logs/rolling-file-%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--异步写日志-->
    <!--
        日志通常来说都以文件形式记录到磁盘，例如使用<RollingFileAppender>，这样的话一次写日志就会发生一次磁盘IO，
        这对于性能是一种损耗，因此更多的，对于每次请求必打的日志（例如请求日志，记录请求API、参数、请求时间），
        我们会采取异步写日志的方式而不让此次写日志发生磁盘IO，阻塞线程从而造成不必要的性能损耗。
        （不要小看这个点，可以网上查一下服务端性能优化的文章，只是因为将日志改为异步写，整个QPS就有了大幅的提高）。
    -->
    <!--
        ASYNC Appender 原理
        当我们配置了AsyncAppender，系统启动时会初始化一条名为"AsyncAppender-Worker-ASYNC"的线程

        当Logging Event进入AsyncAppender后，AsyncAppender会调用appender方法，
        appender方法中再将event填入Buffer（使用的Buffer为BlockingQueue，具体实现为ArrayBlockingQueye）前，
        会先判断当前Buffer的容量以及丢弃日志特性是否开启，
        当消费能力不如生产能力时，AsyncAppender会将超出Buffer容量的Logging Event的级别进行丢弃，
        作为消费速度一旦跟不上生产速度导致Buffer溢出处理的一种方式。

        上面的线程的作用，就是从Buffer中取出Event，交给对应的appender进行后面的日志推送

        从上面的描述我们可以看出，AsyncAppender并不处理日志，只是将日志缓冲到一个BlockingQueue里面去，
        并在内部创建一个工作线程从队列头部获取日志，之后将获取的日志循环记录到附加的其他appender上去，从而达到不阻塞主线程的效果。
        因此AsyncAppender仅仅充当的是事件转发器，必须引用另外一个appender来做事。


        1 discardingThreshold，假如等于20则表示，表示当还剩20%容量时，将丢弃TRACE、DEBUG、INFO级别的Event，只保留WARN与ERROR级别的Event，为了保留所有的events，可以将这个值设置为0，默认值为queueSize/5
        2 queueSize比较好理解，BlockingQueue的最大容量，默认为256
        3 includeCallerData表示是否提取调用者数据，这个值被设置为true的代价是相当昂贵的，为了提升性能，默认当event被加入BlockingQueue时，event关联的调用者数据不会被提取，只有线程名这些比较简单的数据
        4 appender-ref表示AsyncAppender使用哪个具体的<appender>进行日志输出
    -->
    <!--异步输出-->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!--默认不丢失日志，如果队列的80%已满，则丢弃队列中的 TRACE DEBUG INFO级别日志-->
        <discardingThreshold>0</discardingThreshold>
        <!--修改队列深度，该值会影响性能，默认256-->
        <queueSize>256</queueSize>
        <!--添加附加的appender, 最多只能添加一个-->
        <appender-ref ref="rolling-file-1" />
    </appender>

    <!--
        name:用来指定受此logger约束的某一个包或者具体的某一个类
        level(可选):用来设置打印级别，五个常用打印级别从低至高依次为TRACE、DEBUG、INFO、WARN、ERROR
            如果未设置此级别，那么当前logger会继承上级的级别
        additivity(可选):是否向上级logger传递打印信息，默认为true
    -->
    <!--没有配置<appender-ref>,表示此<logger>不会打印出任何信息-->
    <!--root 也是logger, 只有一个属性 level,它的name就是ROOT,是所有logger的父元素-->
    <!--name表示的是LoggerFactory.getLogger(XXX.class)，XXX的包路径，包路径越少越是父级-->
    <root level="error"> <!-- 这里在console打印的日志 日志级别是 root 与 (子级)logger(com.mjm.demo) 最小的级别 ? 不理解 -->
        <appender-ref ref="STDOUT"/>
    </root>

    <logger name="com.mjm" level="info" additivity="true"/>

    <logger name="com.mjm.demo" level="warn">
        <appender-ref ref="ASYNC"/>
    </logger>


</configuration>